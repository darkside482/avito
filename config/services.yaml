# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    redis_payment_standard_timeout: 1800

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            $redis: '@snc_redis.default'
            $redisPaymentStandardTimeout: '%redis_payment_standard_timeout%'
            $shopPaymentProducer: '@old_sound_rabbit_mq.shop_payment_producer'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Consumer/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    app.consumer.shop_payment:
        class: App\Consumer\ShopPaymentConsumer

old_sound_rabbit_mq:
    connections:
        default:
            host: '%env(RABBITMQ_HOST)%'
            port: '%env(RABBITMQ_PORT)%'
            user: '%env(RABBITMQ_USER)%'
            password: '%env(RABBITMQ_PASSWORD)%'
            vhost: '%env(RABBITMQ_VHOST)%'
            lazy:     false
            connection_timeout: 3
            read_write_timeout: 3

    producers:
        shop_payment:
            connection: default
            exchange_options: {name: 'shop_payment', type: direct}
            queue_options: { name: 'shop_payment' }

    consumers:
        shop_payment:
            connection:       default
            exchange_options: {name: 'shop_payment', type: direct}
            queue_options:    {name: 'shop_payment'}
            callback:         app.consumer.shop_payment
